-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_helm_compute_1_Pipeline_VITIS_LOOP_34_13_VITIS_LOOP_35_14_VITIS_LOOP_36_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    D_buf_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    D_buf_ce0 : OUT STD_LOGIC;
    D_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    t_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    t_ce0 : OUT STD_LOGIC;
    t_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC;
    grp_fu_174_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_174_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_174_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_174_p_ce : OUT STD_LOGIC );
end;


architecture behav of krnl_helm_compute_1_Pipeline_VITIS_LOOP_34_13_VITIS_LOOP_35_14_VITIS_LOOP_36_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_533 : STD_LOGIC_VECTOR (10 downto 0) := "10100110011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_79 : STD_LOGIC_VECTOR (7 downto 0) := "01111001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_79 : STD_LOGIC_VECTOR (10 downto 0) := "00001111001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln34_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_224_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_416 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln38_1_fu_332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln38_1_reg_421 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_431_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal D_buf_load_reg_446 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_load_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul200_i_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal c3_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c3_load : STD_LOGIC_VECTOR (3 downto 0);
    signal c2_3_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_fu_322_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten150_fu_72 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln35_1_fu_244_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten150_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_fu_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_1_fu_188_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_c1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten169_fu_80 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_fu_161_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten169_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_fu_182_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln36_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_1_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln36_fu_279_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln36_fu_279_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln36_fu_279_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln34_fu_285_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln36_1_fu_309_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln36_1_fu_309_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln36_1_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln34_2_fu_292_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln36_1_fu_315_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal c3_3_cast17_fu_329_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_351_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_351_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_351_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln36_1_fu_309_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln36_fu_279_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component krnl_helm_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component krnl_helm_mul_4ns_5ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component krnl_helm_mac_muladd_4ns_7ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component krnl_helm_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_4ns_5ns_7_1_1_U90 : component krnl_helm_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln36_fu_279_p0,
        din1 => mul_ln36_fu_279_p1,
        dout => mul_ln36_fu_279_p2);

    mul_4ns_5ns_7_1_1_U91 : component krnl_helm_mul_4ns_5ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        din0 => mul_ln36_1_fu_309_p0,
        din1 => mul_ln36_1_fu_309_p1,
        dout => mul_ln36_1_fu_309_p2);

    mac_muladd_4ns_7ns_7ns_11_4_1_U92 : component krnl_helm_mac_muladd_4ns_7ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_351_p0,
        din1 => grp_fu_351_p1,
        din2 => grp_fu_351_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_351_p3);

    flow_control_loop_pipe_sequential_init_U : component krnl_helm_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c1_fu_76 <= select_ln34_1_fu_188_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c1_fu_76 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    c2_3_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c2_3_fu_68 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_395 = ap_const_lv1_0))) then 
                    c2_3_fu_68 <= select_ln35_fu_322_p3;
                end if;
            end if; 
        end if;
    end process;

    c3_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c3_fu_64 <= add_ln36_fu_232_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c3_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten150_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten150_fu_72 <= select_ln35_1_fu_244_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten150_fu_72 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten169_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln34_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten169_fu_80 <= add_ln34_fu_161_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten169_fu_80 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                D_buf_load_reg_446 <= D_buf_q0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul200_i_reg_456 <= grp_fu_174_p_dout0;
                t_load_reg_451 <= t_q0;
                    zext_ln38_reg_431(10 downto 0) <= zext_ln38_fu_346_p1(10 downto 0);
                    zext_ln38_reg_431_pp0_iter10_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter9_reg(10 downto 0);
                    zext_ln38_reg_431_pp0_iter4_reg(10 downto 0) <= zext_ln38_reg_431(10 downto 0);
                    zext_ln38_reg_431_pp0_iter5_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter4_reg(10 downto 0);
                    zext_ln38_reg_431_pp0_iter6_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter5_reg(10 downto 0);
                    zext_ln38_reg_431_pp0_iter7_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter6_reg(10 downto 0);
                    zext_ln38_reg_431_pp0_iter8_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter7_reg(10 downto 0);
                    zext_ln38_reg_431_pp0_iter9_reg(10 downto 0) <= zext_ln38_reg_431_pp0_iter8_reg(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln34_reg_395 = ap_const_lv1_0))) then
                add_ln38_1_reg_421 <= add_ln38_1_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_155_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln34_reg_410 <= and_ln34_fu_212_p2;
                icmp_ln35_reg_399 <= icmp_ln35_fu_176_p2;
                select_ln36_reg_416 <= select_ln36_fu_224_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln34_reg_395 <= icmp_ln34_fu_155_p2;
            end if;
        end if;
    end process;
    zext_ln38_reg_431(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter4_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter5_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter6_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter7_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter8_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter9_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_431_pp0_iter10_reg(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    D_buf_address0 <= zext_ln38_fu_346_p1(11 - 1 downto 0);

    D_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            D_buf_ce0 <= ap_const_logic_1;
        else 
            D_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln34_1_fu_182_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c1_load) + unsigned(ap_const_lv4_1));
    add_ln34_fu_161_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten169_load) + unsigned(ap_const_lv11_1));
    add_ln35_1_fu_238_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten150_load) + unsigned(ap_const_lv8_1));
    add_ln35_fu_299_p2 <= std_logic_vector(unsigned(select_ln34_fu_285_p3) + unsigned(ap_const_lv4_1));
    add_ln36_fu_232_p2 <= std_logic_vector(unsigned(select_ln36_fu_224_p3) + unsigned(ap_const_lv4_1));
    add_ln38_1_fu_332_p2 <= std_logic_vector(unsigned(select_ln36_1_fu_315_p3) + unsigned(c3_3_cast17_fu_329_p1));
    and_ln34_fu_212_p2 <= (xor_ln34_fu_200_p2 and icmp_ln36_fu_206_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln34_fu_155_p2)
    begin
        if (((icmp_ln34_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_reg_395)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln34_reg_395 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c1_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c1_load <= c1_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_c3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c3_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c3_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c3_load <= c3_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten150_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten150_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten150_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten150_load <= indvar_flatten150_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten169_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten169_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten169_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten169_load <= indvar_flatten169_fu_80;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    c3_3_cast17_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_416),7));
    grp_fu_174_p_ce <= ap_const_logic_1;
    grp_fu_174_p_din0 <= D_buf_load_reg_446;
    grp_fu_174_p_din1 <= t_load_reg_451;
    grp_fu_351_p0 <= grp_fu_351_p00(4 - 1 downto 0);
    grp_fu_351_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_188_p3),11));
    grp_fu_351_p1 <= ap_const_lv11_79(7 - 1 downto 0);
    grp_fu_351_p2 <= grp_fu_351_p20(7 - 1 downto 0);
    grp_fu_351_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_reg_421),11));
    icmp_ln34_fu_155_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten169_load = ap_const_lv11_533) else "0";
    icmp_ln35_fu_176_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten150_load = ap_const_lv8_79) else "0";
    icmp_ln36_fu_206_p2 <= "1" when (ap_sig_allocacmp_c3_load = ap_const_lv4_B) else "0";
    mul_ln36_1_fu_309_p0 <= mul_ln36_1_fu_309_p00(4 - 1 downto 0);
    mul_ln36_1_fu_309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_299_p2),7));
    mul_ln36_1_fu_309_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    mul_ln36_fu_279_p0 <= mul_ln36_fu_279_p00(4 - 1 downto 0);
    mul_ln36_fu_279_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_3_fu_68),7));
    mul_ln36_fu_279_p1 <= ap_const_lv7_B(5 - 1 downto 0);
    or_ln36_fu_218_p2 <= (icmp_ln35_fu_176_p2 or and_ln34_fu_212_p2);
    r_address0 <= zext_ln38_reg_431_pp0_iter10_reg(11 - 1 downto 0);

    r_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_d0 <= mul200_i_reg_456;

    r_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln34_1_fu_188_p3 <= 
        add_ln34_1_fu_182_p2 when (icmp_ln35_fu_176_p2(0) = '1') else 
        ap_sig_allocacmp_c1_load;
    select_ln34_2_fu_292_p3 <= 
        ap_const_lv7_0 when (icmp_ln35_reg_399(0) = '1') else 
        mul_ln36_fu_279_p2;
    select_ln34_fu_285_p3 <= 
        ap_const_lv4_0 when (icmp_ln35_reg_399(0) = '1') else 
        c2_3_fu_68;
    select_ln35_1_fu_244_p3 <= 
        ap_const_lv8_1 when (icmp_ln35_fu_176_p2(0) = '1') else 
        add_ln35_1_fu_238_p2;
    select_ln35_fu_322_p3 <= 
        add_ln35_fu_299_p2 when (and_ln34_reg_410(0) = '1') else 
        select_ln34_fu_285_p3;
    select_ln36_1_fu_315_p3 <= 
        mul_ln36_1_fu_309_p2 when (and_ln34_reg_410(0) = '1') else 
        select_ln34_2_fu_292_p3;
    select_ln36_fu_224_p3 <= 
        ap_const_lv4_0 when (or_ln36_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_c3_load;
    t_address0 <= zext_ln38_fu_346_p1(11 - 1 downto 0);

    t_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln34_fu_200_p2 <= (icmp_ln35_fu_176_p2 xor ap_const_lv1_1);
    zext_ln38_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_351_p3),64));
end behav;
